# -*- coding: binary -*-
require 'digest'

module Msf

####
# This allows one to extract PSEXESVC.EXE from Microsoft Sysinternal's
# PsExec.exe.
####
module Exploit::Remote::SMB::PsexecSvc

  # Returns the bytes for PSEXESVC.EXE on success, or nil on error.
  #
  # @param psexec_path [String] the local filesystem path to PsExec.exe
  # @param verbose [Boolean] true if verbosity is desired, false if otherwise.
  #
  # @return [String] the bytes corresponding to PSEXESVC.EXE.
  def extract_psexesvc(psexec_path, verbose = false)
    read_offset = 0
    bytes_to_read = 0
    if verbose
      print_status("Calculating SHA-256 hash of #{psexec_path}...")
    end
    hash = Digest::SHA256.file(psexec_path).hexdigest
    # If we were given a path to v1.98 (the latest as of the
    # time of this writing), then we set the read offset and
    # file size accordingly.  Otherwise, we fail.  Future
    # versions of PsExec can be handled by adding the new
    # hash, offset, and size to this code.
    if hash == 'f8dbabdfa03068130c277ce49c60e35c029ff29d9e3c74c362521f3fb02670d5'
      read_offset = 193288
      bytes_to_read = 181064
    else
      if verbose
        print_error("Hash is not correct!\nExpected: f8dbabdfa03068130c277ce49c60e35c029ff29d9e3c74c362521f3fb02670d5\nActual:   #{hash}\nEnsure that you have PsExec v1.98.")
      end
      return nil
    end

    if verbose
      print_status("File hash verified.  Extracting PSEXESVC.EXE code from #{psexec_path}...")
    end
    # Extract the PSEXESVC.EXE code from PsExec.exe.
    hPsExec = File.open(psexec_path, 'rb')
    hPsExec.seek(read_offset)
    psexesvc = hPsExec.read(bytes_to_read)
    hPsExec.close

    return psexesvc
  end

end
end
